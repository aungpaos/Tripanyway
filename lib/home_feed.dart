// lib/home_feed.dart
import 'package:flutter/material.dart';

class HomeFeed extends StatefulWidget {
  const HomeFeed({super.key});

  @override
  State<HomeFeed> createState() => _HomeFeedState();
}

class _HomeFeedState extends State<HomeFeed> {
  final List<Map<String, String>> travelPosts = [
    {
      "image": "https://picsum.photos/400/600?random=1",
      "title": "‡πÄ‡∏Å‡∏≤‡∏∞‡∏´‡∏•‡∏µ‡πÄ‡∏õ‡πä‡∏∞",
      "location": "‡∏™‡∏ï‡∏π‡∏•, ‡πÑ‡∏ó‡∏¢",
      "desc":
          "‡πÄ‡∏Å‡∏≤‡∏∞‡∏´‡∏•‡∏µ‡πÄ‡∏õ‡πä‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå‡πÅ‡∏´‡πà‡∏á‡∏ó‡πâ‡∏≠‡∏á‡∏ó‡∏∞‡πÄ‡∏•‡πÉ‡∏ï‡πâ ‡∏ô‡πâ‡∏≥‡∏ó‡∏∞‡πÄ‡∏•‡πÉ‡∏™ ‡∏´‡∏≤‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß ‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡∏Å‡πÉ‡∏ï‡πâ‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏°‡∏≤‡∏Å ‡πÜ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≥‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"
    },
    {
      "image": "https://picsum.photos/400/600?random=2",
      "title": "‡∏ã‡∏≤‡∏õ‡∏≤",
      "location": "‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°",
      "desc":
          "‡∏ã‡∏≤‡∏õ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏ó‡∏≤‡∏á‡∏ï‡∏≠‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏° ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ö‡∏±‡∏ô‡πÑ‡∏î ‡∏ß‡∏¥‡∏ß‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏ô‡πÄ‡∏ú‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à"
    },
    {
      "image": "https://picsum.photos/400/600?random=3",
      "title": "‡∏ü‡∏π‡∏à‡∏¥‡∏ã‡∏±‡∏á",
      "location": "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô",
      "desc":
          "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü‡∏ü‡∏π‡∏à‡∏¥ ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡∏ô‡∏î‡πå‡∏°‡∏≤‡∏£‡πå‡∏Å‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô ‡∏ô‡∏±‡∏Å‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏°‡∏±‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏°‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏ô‡πÄ‡∏Ç‡∏≤‡πÉ‡∏ô‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô"
    },
  ];

  String query = "";

  @override
  Widget build(BuildContext context) {
    final filteredPosts = travelPosts
        .where((post) =>
            post["title"]!.toLowerCase().contains(query.toLowerCase()) ||
            post["location"]!.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return Column(
      children: [
        // üîπ Search Bar
        Padding(
          padding: const EdgeInsets.all(12.0),
          child: TextField(
            decoration: InputDecoration(
              hintText: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà...",
              prefixIcon: const Icon(Icons.search),
              filled: true,
              fillColor: Colors.grey[200],
              contentPadding: const EdgeInsets.symmetric(vertical: 0),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(30),
                borderSide: BorderSide.none,
              ),
            ),
            onChanged: (value) {
              setState(() {
                query = value;
              });
            },
          ),
        ),

        // üîπ Feed (GridView)
        Expanded(
          child: GridView.builder(
            padding: const EdgeInsets.all(12),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2, // 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
              crossAxisSpacing: 12,
              mainAxisSpacing: 12,
              childAspectRatio: 0.7,
            ),
            itemCount: filteredPosts.length,
            itemBuilder: (context, index) {
              final post = filteredPosts[index];
              return GestureDetector(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => DetailPage(
                        imageUrl: post["image"]!,
                        title: post["title"]!,
                        location: post["location"]!,
                        desc: post["desc"]!,
                      ),
                    ),
                  );
                },
                child: TravelCard(
                  imageUrl: post["image"]!,
                  title: post["title"]!,
                  location: post["location"]!,
                ),
              );
            },
          ),
        ),
      ],
    );
  }
}

// üîπ Card ‡πÉ‡∏ô Feed
class TravelCard extends StatelessWidget {
  final String imageUrl;
  final String title;
  final String location;

  const TravelCard({
    super.key,
    required this.imageUrl,
    required this.title,
    required this.location,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      clipBehavior: Clip.antiAlias,
      elevation: 3,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
          Expanded(
            child: Image.network(
              imageUrl,
              width: double.infinity,
              fit: BoxFit.cover,
            ),
          ),

          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(title,
                    style: const TextStyle(
                        fontWeight: FontWeight.bold, fontSize: 14)),
                const SizedBox(height: 4),
                Text(location,
                    style: TextStyle(color: Colors.grey[600], fontSize: 12)),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// üîπ ‡∏´‡∏ô‡πâ‡∏≤ Detail (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° Like / Save / Share)
class DetailPage extends StatefulWidget {
  final String imageUrl;
  final String title;
  final String location;
  final String desc;

  const DetailPage({
    super.key,
    required this.imageUrl,
    required this.title,
    required this.location,
    required this.desc,
  });

  @override
  State<DetailPage> createState() => _DetailPageState();
}

class _DetailPageState extends State<DetailPage> {
  bool isLiked = false;
  bool isSaved = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà
            Image.network(
              widget.imageUrl,
              width: double.infinity,
              height: 300,
              fit: BoxFit.cover,
            ),

            // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(widget.title,
                      style: const TextStyle(
                          fontSize: 24, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 8),
                  Text(widget.location,
                      style:
                          TextStyle(color: Colors.grey[700], fontSize: 16)),
                  const SizedBox(height: 16),
                  Text(widget.desc,
                      style: const TextStyle(fontSize: 16, height: 1.5)),
                ],
              ),
            ),

            // üîπ ‡∏õ‡∏∏‡πà‡∏° Like / Save / Share
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  IconButton(
                    onPressed: () {
                      setState(() {
                        isLiked = !isLiked;
                      });
                    },
                    icon: Icon(
                      isLiked ? Icons.favorite : Icons.favorite_border,
                      color: isLiked ? Colors.red : Colors.black,
                    ),
                  ),
                  IconButton(
                    onPressed: () {
                      setState(() {
                        isSaved = !isSaved;
                      });
                    },
                    icon: Icon(
                      isSaved ? Icons.bookmark : Icons.bookmark_border,
                      color: isSaved ? Colors.blue : Colors.black,
                    ),
                  ),
                  IconButton(
                    onPressed: () {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text('‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!')),
                      );
                    },
                    icon: const Icon(Icons.share),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }
}
